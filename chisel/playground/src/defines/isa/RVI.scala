package cpu.defines

import chisel3._
import chisel3.util._

object RV32I_ALUInstr extends HasInstrType with CoreParameter {
  def ADDI = BitPat("b????????????_?????_000_?????_0010011")
  def SLLI = if (XLEN == 32) BitPat("b0000000?????_?????_001_?????_0010011")
  else BitPat("b000000??????_?????_001_?????_0010011")
  def SLTI  = BitPat("b????????????_?????_010_?????_0010011")
  def SLTIU = BitPat("b????????????_?????_011_?????_0010011")
  def XORI  = BitPat("b????????????_?????_100_?????_0010011")
  def SRLI = if (XLEN == 32) BitPat("b0000000?????_?????_101_?????_0010011")
  else BitPat("b000000??????_?????_101_?????_0010011")
  def ORI  = BitPat("b????????????_?????_110_?????_0010011")
  def ANDI = BitPat("b????????????_?????_111_?????_0010011")
  def SRAI = if (XLEN == 32) BitPat("b0100000?????_?????_101_?????_0010011")
  else BitPat("b010000??????_?????_101_?????_0010011")

  def ADD  = BitPat("b0000000_?????_?????_000_?????_0110011")
  def SLL  = BitPat("b0000000_?????_?????_001_?????_0110011")
  def SLT  = BitPat("b0000000_?????_?????_010_?????_0110011")
  def SLTU = BitPat("b0000000_?????_?????_011_?????_0110011")
  def XOR  = BitPat("b0000000_?????_?????_100_?????_0110011")
  def SRL  = BitPat("b0000000_?????_?????_101_?????_0110011")
  def OR   = BitPat("b0000000_?????_?????_110_?????_0110011")
  def AND  = BitPat("b0000000_?????_?????_111_?????_0110011")
  def SUB  = BitPat("b0100000_?????_?????_000_?????_0110011")
  def SRA  = BitPat("b0100000_?????_?????_101_?????_0110011")

  def AUIPC = BitPat("b????????????????????_?????_0010111")
  def LUI   = BitPat("b????????????????????_?????_0110111")

  // 在Decoder模块中搭配ListLookup函数使用
  val table = Array(
    // ADD指令将被解析为InstrR类型的指令，功能单元类型为alu，功能单元操作类型为add
    // ADD -> List(InstrR, FuType.alu, ALUOpType.add)
    // TODO: 完成其他指令的解析

    // LAB1: RV32I_ALUInstr : R type
    ADD  -> List(InstrR, FuType.alu, ALUOpType.add),
    SLL  -> List(InstrR, FuType.alu, ALUOpType.sll),
    SLT  -> List(InstrR, FuType.alu, ALUOpType.slt),
    SLTU -> List(InstrR, FuType.alu, ALUOpType.sltu),
    XOR  -> List(InstrR, FuType.alu, ALUOpType.xor),
    SRL  -> List(InstrR, FuType.alu, ALUOpType.srl),
    OR   -> List(InstrR, FuType.alu, ALUOpType.or),
    AND  -> List(InstrR, FuType.alu, ALUOpType.and),
    SUB  -> List(InstrR, FuType.alu, ALUOpType.sub),
    SRA  -> List(InstrR, FuType.alu, ALUOpType.sra),

    // LAB2: RV32I_ALUInstr : I type
    ADDI  -> List(InstrI, FuType.alu, ALUOpType.add),
    SLLI  -> List(InstrI, FuType.alu, ALUOpType.sll),
    SLTI  -> List(InstrI, FuType.alu, ALUOpType.slt),
    SLTIU -> List(InstrI, FuType.alu, ALUOpType.sltu),
    XORI  -> List(InstrI, FuType.alu, ALUOpType.xor),
    SRLI  -> List(InstrI, FuType.alu, ALUOpType.srl),
    ORI   -> List(InstrI, FuType.alu, ALUOpType.or),
    ANDI  -> List(InstrI, FuType.alu, ALUOpType.and),
    SRAI  -> List(InstrI, FuType.alu, ALUOpType.sra),

    // LAB2: RV32I_ALUInstr : U type
    AUIPC -> List(InstrU, FuType.alu, ALUOpType.add),
    LUI   -> List(InstrU, FuType.alu, ALUOpType.add),

  )
}

object RV64IInstr extends HasInstrType {
  def ADDIW = BitPat("b???????_?????_?????_000_?????_0011011")
  def SLLIW = BitPat("b0000000_?????_?????_001_?????_0011011")
  def SRLIW = BitPat("b0000000_?????_?????_101_?????_0011011")
  def SRAIW = BitPat("b0100000_?????_?????_101_?????_0011011")
  def SLLW  = BitPat("b0000000_?????_?????_001_?????_0111011")
  def SRLW  = BitPat("b0000000_?????_?????_101_?????_0111011")
  def SRAW  = BitPat("b0100000_?????_?????_101_?????_0111011")
  def ADDW  = BitPat("b0000000_?????_?????_000_?????_0111011")
  def SUBW  = BitPat("b0100000_?????_?????_000_?????_0111011")

  val table = Array(
    // TODO: 完成RV64I指令集的解析

    // LAB1: RV64IInstr : R type
    SLLW -> List(InstrR, FuType.alu, ALUOpType.sllw),
    SRLW -> List(InstrR, FuType.alu, ALUOpType.srlw),
    SRAW -> List(InstrR, FuType.alu, ALUOpType.sraw),
    ADDW -> List(InstrR, FuType.alu, ALUOpType.addw),
    SUBW -> List(InstrR, FuType.alu, ALUOpType.subw),

    // LAB2: RV64IInstr : I type
    SLLIW -> List(InstrI, FuType.alu, ALUOpType.sllw),
    SRLIW -> List(InstrI, FuType.alu, ALUOpType.srlw),
    SRAIW -> List(InstrI, FuType.alu, ALUOpType.sraw),
    ADDIW -> List(InstrI, FuType.alu, ALUOpType.addw),

  )
}

// LAB3: RV32MInstr
object RV32MInstr extends HasInstrType with CoreParameter {
  
  def MUL    = BitPat("b0000001_?????_?????_000_?????_0110011")
  def MULH   = BitPat("b0000001_?????_?????_001_?????_0110011")
  def MULHSU = BitPat("b0000001_?????_?????_010_?????_0110011")
  def MULHU  = BitPat("b0000001_?????_?????_011_?????_0110011")
  
  def DIV    = BitPat("b0000001_?????_?????_100_?????_0110011")
  def DIVU   = BitPat("b0000001_?????_?????_101_?????_0110011")
  def REM    = BitPat("b0000001_?????_?????_110_?????_0110011")
  def REMU   = BitPat("b0000001_?????_?????_111_?????_0110011")

  val table = Array(

    MUL    -> List(InstrR, FuType.mdu, MDUOpType.mul),
    MULH   -> List(InstrR, FuType.mdu, MDUOpType.mulh),
    MULHSU -> List(InstrR, FuType.mdu, MDUOpType.mulhsu),
    MULHU  -> List(InstrR, FuType.mdu, MDUOpType.mulhu),
    
    DIV    -> List(InstrR, FuType.mdu, MDUOpType.div),
    DIVU   -> List(InstrR, FuType.mdu, MDUOpType.divu),
    REM    -> List(InstrR, FuType.mdu, MDUOpType.rem),
    REMU   -> List(InstrR, FuType.mdu, MDUOpType.remu),

  )

}

// LAB3: RV64MInstr
object RV64MInstr extends HasInstrType with CoreParameter {

  def MULW  = BitPat("b0000001_?????_?????_000_?????_0111011")
  
  def DIVW  = BitPat("b0000001_?????_?????_100_?????_0111011")
  def DIVUW = BitPat("b0000001_?????_?????_101_?????_0111011")
  def REMW  = BitPat("b0000001_?????_?????_110_?????_0111011")
  def REMUW = BitPat("b0000001_?????_?????_111_?????_0111011")

  val table = Array(

    MULW  -> List(InstrR, FuType.mdu, MDUOpType.mulw),
    
    DIVW  -> List(InstrR, FuType.mdu, MDUOpType.divw),
    DIVUW -> List(InstrR, FuType.mdu, MDUOpType.divuw),
    REMW  -> List(InstrR, FuType.mdu, MDUOpType.remw),
    REMUW -> List(InstrR, FuType.mdu, MDUOpType.remuw),

  )
  
}

// LAB4: RV32I_LSUInstr
object RV32I_LSUInstr extends HasInstrType with CoreParameter {
  def LB  = BitPat("b????????????_?????_000_?????_0000011")
  def LH  = BitPat("b????????????_?????_001_?????_0000011")
  def LW  = BitPat("b????????????_?????_010_?????_0000011")
  def LD  = BitPat("b????????????_?????_011_?????_0000011")
  def LBU = BitPat("b????????????_?????_100_?????_0000011")
  def LHU = BitPat("b????????????_?????_101_?????_0000011")
  def LWU = BitPat("b????????????_?????_110_?????_0000011")

  def SB  = BitPat("b???????_?????_?????_000_?????_0100011")
  def SH  = BitPat("b???????_?????_?????_001_?????_0100011")
  def SW  = BitPat("b???????_?????_?????_010_?????_0100011")
  def SD  = BitPat("b???????_?????_?????_011_?????_0100011")

  val table = Array(

    LB  -> List(InstrI, FuType.lsu, LSUOpType.lb),
    LH  -> List(InstrI, FuType.lsu, LSUOpType.lh),
    LW  -> List(InstrI, FuType.lsu, LSUOpType.lw),
    LD  -> List(InstrI, FuType.lsu, LSUOpType.ld),
    LBU -> List(InstrI, FuType.lsu, LSUOpType.lbu),
    LHU -> List(InstrI, FuType.lsu, LSUOpType.lhu),
    LWU -> List(InstrI, FuType.lsu, LSUOpType.lwu),

    SB  -> List(InstrS, FuType.lsu, LSUOpType.sb),
    SH  -> List(InstrS, FuType.lsu, LSUOpType.sh),
    SW  -> List(InstrS, FuType.lsu, LSUOpType.sw),
    SD  -> List(InstrS, FuType.lsu, LSUOpType.sd),

  )
}

object RVIInstr extends CoreParameter {
  val table = RV32I_ALUInstr.table ++
    (if (XLEN == 64) RV64IInstr.table else Array.empty) ++
    // LAB3: RVIInstr : RV32MInstr & RV64MInstr
    RV32MInstr.table ++
    (if (XLEN == 64) RV64MInstr.table else Array.empty) ++
    // LAB4: RVIInstr : RV32I_LSUInstr
    RV32I_LSUInstr.table
}